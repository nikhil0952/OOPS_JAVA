// to show the functionality and hide the internal working

// Types 
-> Abstract :  0 - 100
-> It can have abstract and non-abstract methods.
-> cannot not have instance 
-> can extend other abstract class
->It can have constructors and static methods also.
->If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract

-> interface : 100 (implements)
-> In Java, prior to Java 8, interface methods could not have a body. They were purely abstract, meaning they only declared the method signature without providing any implementation. Classes implementing these interfaces were required to provide implementations for all declared methods.
However, starting from Java 8, with the introduction of default methods and static methods in interfaces, it became possible for interface methods to have a body.
-> It is used to achieve abstraction and multiple inheritance in Java.
-> can extends other interface
-> Since Java 8, we can have default and static methods in an interface.
-> Since Java 9, we can have private methods in an interface.

